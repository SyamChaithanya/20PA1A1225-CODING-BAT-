//Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences 
public boolean endOther(String a, String b) {
    if(a.length() < b.length()) {
        String temp = a;
        a = b.toLowerCase();
        b = temp.toLowerCase();
    }
                  
    return a.substring(a.length() - b.length()).equals(b);
}

//We'll say that a "triple" in a string is a char appearing three times in a row. Return the number of triples in the given string. The triples may overlap.
public int countTriple(String str) {
  if(str.length() <= 2) return 0;
if(str.charAt(0) == str.charAt(1) && str.charAt(0) == str.charAt(2))
return 1 + countTriple(str.substring(1));

return countTriple(str.substring(1));

}

//Given a string, return true if the number of appearances of "is" anywhere in the string is equal to the number of appearances of "not" anywhere in the string 
public boolean equalIsNot(String str) {
  int countIs = 0;
int countNot = 0;
str += " ";

for (int i = 0; i < str.length() -2 ; i++) {
if (str.substring(i, i+2).equals("is")) countIs++;
if (str.substring(i, i+3).equals("not")) countNot++;
}
return (countIs == countNot);
}

